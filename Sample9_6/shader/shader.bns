uniform mat4 uMVPMatrix;    //总变换矩阵
attribute vec3 aPosition;   //顶点位置
attribute vec2 aTexCoor;//顶点纹理坐标
varying vec2 vTextureCoord;//用于传递给片元着色器的变量
varying float currY;        //用于传递给片元着色器的y坐标
void main(){
    //根据总变换矩阵计算此次绘制顶点位置
    gl_Position = uMVPMatrix * vec4(aPosition,1);
    vTextureCoord = aTexCoor;  //将原始顶点位置传递给片元着色器
    currY=aPosition.y;         //将顶点的y坐标传递给片元着色器
}
<#BREAK_BN#>

precision mediump float;
uniform sampler2D sTexture;//草皮纹理内容数据
uniform sampler2D sTextureRock;//岩石纹理内容数据
uniform float landStartY;       //过程纹理起始y坐标
uniform float landYSpan;        //过程纹理跨度
varying vec2 vTextureCoord; //接收从顶点传过来的参数
varying float currY;        //接收从顶点传过来的y坐标
void main()
{
    //将计算出的颜色给此片元
    vec4 gColor = texture2D(sTexture,vTextureCoord);
    vec4 rColor = texture2D(sTextureRock,vTextureCoord);
    vec4 finalColor;
    if(currY<landStartY){
        finalColor=gColor;//当片元的y坐标小于起始y坐标时，采用草皮纹理
    }else if(currY>landStartY+landYSpan){
        finalColor=rColor;//当片元的y坐标大于过程纹理的起始y坐标加跨度时，采用岩石纹理
    }else{
        float currYRatio=(currY-landStartY)/landYSpan;//计算岩石纹理所占的百分比
        finalColor=rColor*currYRatio+gColor*(1.0-currYRatio);//将岩石、草皮纹理颜色按比例混合
    }
    gl_FragColor = finalColor;
}