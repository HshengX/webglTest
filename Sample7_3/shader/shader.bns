uniform mat4 uMVPMatrix;    //总变换矩阵
uniform mat4 uMMatrix;      //变换矩阵(包括平移、旋转、缩放)
uniform vec3 uLightLocation;//光源位置
uniform vec3 uCamera;       //摄像机位置
attribute vec3 aPosition;   //顶点位置
attribute vec3 aNormal;     //顶点法向量
varying vec3 vPosition;     //用于传递给片元着色器的顶点位置
varying vec4 vAmbient;      //用于传递给片元着色器的环境光分量
varying vec4 vDiffuse;      //用于传递给片元着色器的散射光分量
varying vec4 vSpecular;      //用于传递给片元着色器的镜面光最终强度
void pointLight(            //镜面光光照计算的方法
in vec3 normal,             //法向量
inout vec4 ambient,         //环境光光最终强度
inout vec4 diffuse,         //散射光最终强度
inout vec4 specular,        //镜面光最终强度
in vec3 lightLocation,      //光源位置
in vec4 lightAmbient,       //环境光强度
in vec4 lightDiffuse,       //散射光强度
in vec4 lightSpecular){     //镜面光强度
    ambient=lightAmbient;
    vec3 normalTarget=aPosition+normal; //计算变换后的法向量
    vec3 newNormal=(uMMatrix*vec4(normalTarget,1)).xyz-(uMMatrix*vec4(aPosition,1)).xyz;
    newNormal=normalize(newNormal); //对法向量规格化
    //计算从表面点到摄像机的向量
    vec3 eye=normalize(uCamera-(uMMatrix*vec4(aPosition,1)).xyz);
    //计算从表面到光源位置的向量vp
    vec3 vp=normalize(lightLocation-(uMMatrix*vec4(aPosition,1)).xyz);
    vp=normalize(vp);   //规格化vp
    vec3 halfVector=normalize(eye+vp);//求视线与光线的半向量
    float shininess=50.0;             //粗糙度，越小越光滑
    //求法向量与vp向量的点积与0的最大值
    float nDotViewPosition=max(0.0,dot(newNormal,vp));
    diffuse=lightDiffuse*nDotViewPosition;  //计算散射光的最终强度
    float nDotViewHalfVector=dot(newNormal,halfVector);//法向量与半向量的点积，及cos夹角值
    float powerFactor=max(0.0,pow(nDotViewHalfVector,shininess));//镜面反射光强度因子
    specular=lightSpecular*powerFactor;  //计算镜面光的最终强度
}
void main(){
    //根据总变换矩阵计算此次绘制顶点位置
    gl_Position = uMVPMatrix * vec4(aPosition,1);
    vPosition = aPosition;  //将原始顶点位置传递给片元着色器
    vec4 ambientTemp,diffuseTemp,specularTemp;
    pointLight(normalize(aNormal),ambientTemp,diffuseTemp,specularTemp,uLightLocation,vec4(0.15,0.15,0.15,1.0),vec4(0.8,0.8,0.8,1.0),vec4(0.7,0.7,0.7,1));
    vAmbient=ambientTemp;   //将最终环境光强度传给片元着色器
    vDiffuse=diffuseTemp;   //将最终环境光强度传给片元着色器
    vSpecular=specularTemp; //将最终镜面光强度传给片元着色器
}
<#BREAK_BN#>

precision mediump float;
uniform float uR;
varying vec3 vPosition; //接收从顶点着色器过来的顶点位置
varying vec4 vAmbient;  //接收从顶点着色器传递过来的环境光分量
varying vec4 vDiffuse;  //接收从顶点着色器传过来的散射光分量
varying vec4 vSpecular;  //接收从顶点着色器传过来的镜面反射光分量
void main()
{
    //将计算出的颜色给此片元
    vec4 finalColor = vec4(0.9,0.9,0.9,1.0);
    vec4 lightColor =finalColor*vAmbient+finalColor*vDiffuse+finalColor*vSpecular;//综合三个通道光的最终强度计算颜色，片元颜色值与镜面光强度的加权计算
    gl_FragColor = vec4(lightColor.xyz,1.0); //指定此片元的颜色值
}